import hbp_nrp_excontrol.nrp_states as states
from smach import StateMachine
from hbp_nrp_excontrol.logs import clientLogger 
from std_msgs.msg import String
import smach
import random
import rospy
import time 
from gazebo_msgs.msg import ModelStates
from gazebo_msgs.srv import GetModelState


FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])
GREEN_FIELD = (-6.5, -4.7, 0.03)
BLUE_FIELD  = (-6.5, 4.7, 0.03)
PLACEFIELD_LENGTH = 5

ROBOT_ID = 'husky'


class Wait(smach.State):

    def __init__(self):
        smach.State.__init__(self,  outcomes=['valid','invalid', 'preempted'])  
        self.initial_time = 0 
        clientLogger.info("init")
        self.random_interval = -1

    def get_x_pos(self):
        position_service = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
        position_response = position_service(ROBOT_ID, '')
        return position_response.pose.position.x

    def execute(self, userdata):
        if (self.initial_time == 0):
            self.initial_time = time.time()
        if (self.random_interval == -1):
            self.random_interval = random.randint(1, 4)

        x_pos = self.get_x_pos()
        current_time = time.time()
        time_diff = current_time - self.initial_time

        if (time_diff >= self.random_interval):
            self.initial_time = 0
            self.random_interval = -1
            return 'invalid'
        elif (x_pos > -2): 
            clientLogger.info("PREEMPTED")
            self.initial_time = 0
            self.random_interval = -1
            return 'preempted'        
        else:
            return 'valid'



class WaitForRosMsg(smach.State): 
    
    def __init__(self, matchString):
        smach.State.__init__(self,  outcomes=['valid','invalid', 'preempted'])  
        self.matchString = matchString
        self.match = False

    def callback(self, ros_msg):
        if (self.matchString in ros_msg.data):
            self.match = True

    def execute(self, userdata): 
        rospy.Subscriber('state_msg', String, self.callback)
        if self.match:
            clientLogger.info("STATE MACHINE: STRINGS MATCH")
            return 'valid'
        clientLogger.info("State Machine: NO MATCH")
        return 'invalid'

with sm:
    StateMachine.add(
      "on_green_field",
      states.RobotPoseMonitorState(ROBOT_ID, lambda _, p: not ((-9 < p.position.x < -4) and
                                                  (-7.2 < p.position.y < -2.2) and
                                                  (0 < p.position.z < 1))),
      transitions={'valid': 'on_green_field',
                    'invalid': 'wait_random_time',
                    'preempted': PREEMPTED}                                                
    )
    StateMachine.add(
      "wait_random_time",
      Wait(),
      transitions = {"valid": "wait_random_time",
                     "invalid": "set_reward_red",
                     "preempted": "on_green_field"}
    )
    StateMachine.add( 
      "set_reward_red",
      states.SetMaterialColorServiceState("left_sphere",
                                          "link",
                                          "visual",
                                          "Gazebo/RedGlow"),
      transitions = {"succeeded": 'wait_for_reset',
                     "aborted": FINISHED,
                     "preempted": PREEMPTED}
    )
    StateMachine.add(
      "wait_for_reset",
      states.RobotPoseMonitorState(ROBOT_ID, lambda _, p: not (p.position.x > -2)),
      transitions = {'valid': 'wait_for_reset',
                     'invalid': 'check_for_reversal',
                     'preempted': PREEMPTED}
    )
    StateMachine.add(
      "check_for_reversal",
      WaitForRosMsg('Start Reversal'),
      transitions = {"valid": "start_reversal",
                  "invalid": "on_green_field",
                  "preempted": PREEMPTED}
      )

################################# START REVERSAL ##########################################

    StateMachine.add(
      "start_reversal",
      states.ClientLogState("STATE MACHINE: Starting Reversal"),
      transitions = {'succeeded': 'on_blue_field',
                     'aborted': ERROR}
    )

    StateMachine.add(
      "on_blue_field",
      states.RobotPoseMonitorState(ROBOT_ID, lambda _, p: not ((-9 < p.position.x < -4) and
                                                  (2.2 < p.position.y < 7.2) and
                                                  (0 < p.position.z < 1))),
      transitions={'valid': 'reversal_wait_random_time',
                    'invalid': 'reversal_wait_random_time',
                    'preempted': PREEMPTED}                                                
    )
    StateMachine.add(
      "reversal_wait_random_time",
      Wait(),
      transitions={'valid': 'reversal_wait_random_time',
                   'invalid': 'reversal_set_reward_red',
                   'preempted': 'on_blue_field'}
    )
    StateMachine.add(
      "reversal_set_reward_red",
      states.SetMaterialColorServiceState("right_sphere",
                                          "link",
                                          "visual",
                                          "Gazebo/RedGlow"),
      transitions = {"succeeded": 'reversal_wait_for_reset',
                     "aborted": FINISHED,
                     "preempted": PREEMPTED}
    )
    StateMachine.add(
      "reversal_wait_for_reset",
      states.RobotPoseMonitorState(ROBOT_ID, lambda _, p: not (p.position.x > -2)),
      transitions = {'valid': 'reversal_wait_for_reset',
                     'invalid': 'on_blue_field',
                     'preempted': PREEMPTED}
    )